#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer particlesLocations {
    vec2 particles[];
};

layout(std430, binding = 3) buffer particlesVelocities {
    vec2 velocities[];
};

layout(std430, binding = 8) buffer particlesPrevVelocities {
    vec2 velocitiesPrev[];
};

layout(std430, binding = 4) buffer particlesPrevPos {
    vec2 particlesPrev[];
};

layout(std430, binding = 10) buffer spatialLookUpTable {
    ivec2 spatialLookUp[];
};

layout(std430, binding = 11) buffer spatialOffsetTable {
    uint spatialOffsets[];
};


uint currIndex;
int currID;
highp float density;
highp float nearDensity;
highp float P;
highp float Pnear;
vec2 currParticle;

uniform uint plCount;
uniform int neighbooringIDs[9];
uniform vec4 border;
uniform ivec2 gridNum;
uniform float dt;

uniform float targetDensity;
uniform float pressMult;
uniform float nearPressMult;
uniform float smoothingRadius;
uniform float gravity;
uniform float sigma;
uniform float beta;

uniform float attraction;
uniform bool isClicked;
uniform vec2 mousePos;

void getID();
void calcDensity();
void applyPressure();
void applyVelocities();
void borderResolution();
void calculateAttraction();
void advanceToPredictedPositions();
int getCellKey(int ID);
float smoothingQuadraticSpike(float q);
float nearDensityKernel(float q);
float smoothingQuadraticSpikeDerivative(float q);

void main(){

    currIndex = gl_GlobalInvocationID.x;

    if (currIndex >= plCount) return;
    
    particlesPrev[currIndex] = particles[currIndex];
    velocitiesPrev[currIndex] = velocities[currIndex];

    barrier();

    getID();

    calcDensity();

    barrier();

    // advanceToPredictedPositions();

    // barrier();

    applyPressure();

    barrier();

    if(isClicked)
        calculateAttraction();

    barrier();

    applyVelocities();

    barrier();

    borderResolution();   

    spatialLookUp[currIndex] = ivec2(0);
    spatialOffsets[currIndex] = 0;

}


void calcDensity() {
    
    if (currID >= 0){

        for(int j = 0; j < 9; j++){

            int currCellKey = getCellKey(currID + neighbooringIDs[j]);
            uint startIndex = spatialOffsets[currCellKey];
            
            for(uint i = startIndex; i < plCount && spatialLookUp[i].x == currCellKey; i++){

                int neighboorIndex = spatialLookUp[i].y;

                highp float dist = distance(particles[currIndex], particles[neighboorIndex]); 

                float q = dist/smoothingRadius;

                if (q > 1) continue;

                density += smoothingQuadraticSpike(q);
                nearDensity += nearDensityKernel(q);
            

        }   }
    }
    else
        for(uint i = 0; i < plCount; i++){
            highp float dist = distance(particles[currIndex], particles[i]); 

            float q = dist/smoothingRadius;

            if (q > 1) continue;

            density += smoothingQuadraticSpike(q);
            nearDensity += nearDensityKernel(q);

        }

    
    // Pressure 
    P = pressMult * (density - targetDensity);
    // Near Pressure
    Pnear =  nearPressMult * nearDensity;

}

void advanceToPredictedPositions() {

    particles[currIndex] += velocities[currIndex] * dt;

}

void applyPressure() {
    
    if (currID < 0) return;

    vec2 dx = vec2(0);
    vec2 du = vec2(0);
    
    for(int j = 0; j < 9; j++){

        int currCellKey = getCellKey(currID + neighbooringIDs[j]);
        uint startIndex = spatialOffsets[currCellKey];
        
        for(uint i = startIndex; i < plCount && spatialLookUp[i].x == currCellKey; i++){

            int neighboorIndex = spatialLookUp[i].y;

            vec2 neighboor = particlesPrev[neighboorIndex];
            float dist = distance(particlesPrev[currIndex], neighboor);
            vec2 unit_R = normalize(particlesPrev[currIndex] - neighboor);

            float q = dist/smoothingRadius;


            if ( q >= 1 || unit_R == vec2(0)) continue;

            vec2 D = vec2((P * smoothingQuadraticSpikeDerivative(q) + Pnear * smoothingQuadraticSpike(q)) * dt * dt) * unit_R;

            if (particles[currIndex] == neighboor){
                velocitiesPrev[neighboorIndex] -= D;
            }
            
            // Velocity difference
            vec2 u = unit_R * (velocitiesPrev[currIndex] - velocitiesPrev[neighboorIndex]);

            if (u != vec2(0)){
                vec2 I = unit_R * smoothingQuadraticSpikeDerivative(q) * (sigma * u + beta * u * u / nearPressMult) * dt;
                du += I;
                
                // // Max Force
                // float maxForce = 0.01 * smoothingRadius / dt; // Adjust this value as needed
                // I = clamp(I, -maxForce, maxForce);
                velocities[neighboorIndex] += I/2.f;

            }
            
            dx += D;

    }   }

    barrier();

    particles[currIndex] += dx;
    velocities[currIndex] -= du/2;

}


void applyVelocities(){
    velocities[currIndex] += vec2(0, gravity) * dt + particles[currIndex] - particlesPrev[currIndex];
    particles[currIndex] += velocities[currIndex];
}

void borderResolution(){

    float collisionDamping = 0.6;
    float borderFriction = 0;

    if(particles[currIndex].x < border.x){
        particles[currIndex].x = border.x + 1;
        velocities[currIndex].x *= -collisionDamping;
        
    }
    if (particles[currIndex].x > border.y){
        particles[currIndex].x = border.y - 1;
        velocities[currIndex].x *= -collisionDamping;
        
    }

    if(particles[currIndex].y < border.z){
        particles[currIndex].y = border.z + 1;
        velocities[currIndex].y *= -collisionDamping;
        
    }
    if (particles[currIndex].y > border.w){
        particles[currIndex].y = border.w - 1;
        velocities[currIndex].y *= -collisionDamping;
        
    }
}

void calculateAttraction(){

    float dist = distance(particlesPrev[currIndex], mousePos);
    vec2 unit_R = normalize(particlesPrev[currIndex] - mousePos);

    float q = dist/smoothingRadius;

    if(dist > 200) return;

    velocities[currIndex] = attraction * -unit_R * smoothingQuadraticSpike(q);


}

void getID(){
    // For debugging
    // ID[currIndex] = int((gridNum.x * ceil((particles[currIndex].y - border.z)/smoothingRadius) - 1) + (ceil((particles[currIndex].x - border.x)/smoothingRadius) - 1) - gridNum.x + 1);
    currID = int((gridNum.x * ceil((particles[currIndex].y - border.z)/smoothingRadius) - 1) + (ceil((particles[currIndex].x - border.x)/smoothingRadius) - 1) - gridNum.x + 1);
}

int getCellKey(int ID){
    return int((ID * 7919) % plCount);
}

float smoothingQuadraticSpike(float q){
    return (1 - q) * (1 - q);
}

float nearDensityKernel(float q){
    return (1 - q) * (1 - q) * (1 - q);
}

float smoothingQuadraticSpikeDerivative(float q){
    return (1 - q);
}