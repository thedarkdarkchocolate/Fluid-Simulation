#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Array to test sorting
layout(std430, binding = 12) buffer arrayToSort {
    int array[];
};

layout(std430, binding = 10) buffer spatialLookUpTable {
    ivec2 spatialLookUp[];
};

layout(std430, binding = 11) buffer spatialOffsetTable {
    uint spatialOffsets[];
};


uniform uint plCount;
uniform uint groupWidth;
uniform uint groupHeight;
uniform uint stepIndex;
uniform bool setOffsets;

void calculateOffset(uint currIndex);

void main()
{
    uint i = gl_GlobalInvocationID.x;
	
	if (setOffsets)
	{
		calculateOffset(i);
		return;
	}	

	// uint hIndex = i & (groupWidth - 1);
	// uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
	// uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
	// uint indexRight = indexLeft + rightStepSize;

	// if (indexRight >= plCount) return;


	// int valueLeft = array[indexLeft];
	// int valueRight = array[indexRight];

	// // Swap if value is descending
	// if (valueLeft > valueRight)
	// {
	// 	int temp = array[indexLeft];
	// 	array[indexLeft] = array[indexRight];
	// 	array[indexRight] = temp;
	// }


}

void calculateOffset(uint currIndex){

	if (currIndex >= plCount) return;

	uint key = spatialLookUp[currIndex].x;
	uint keyPrev = (currIndex == 0 ? plCount + 1 : spatialLookUp[currIndex - 1].x);

	if (key != keyPrev){
		spatialOffsets[key] = currIndex;
		// atomicExchange(spatialOffsets[key], currIndex);
	}

}