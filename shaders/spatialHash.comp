#version 430

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer particlesLocations {
    vec2 particles[];
};

layout(std430, binding = 1) buffer spatialLookupBuffer {
    uint spatialLookup[];
};

layout(std430, binding = 2) buffer spatialIndicesBuffer {
    uint spatialIndices[];
};

// Constants used for hashing
const uint hashK1 = 15823;
const uint hashK2 = 9737333;
uint currIndex;

uniform uint plCount;
uniform float smoothingRadius;

const ivec2 offsets[9] =
{
	ivec2(-1, 1),
	ivec2(0, 1),
	ivec2(1, 1),
	ivec2(-1, 0),
	ivec2(0, 0),
	ivec2(1, 0),
	ivec2(-1, -1),
	ivec2(0, -1),
	ivec2(1, -1),
};

ivec2 GetCell2D(vec2 position)
{
	return ivec2((floor(position / smoothingRadius)));
}

uint HashCell2D(vec2 cell)
{
	uint a = uint(cell.x * hashK1);
	uint b = uint(cell.y * hashK2);
	return (a + b);
}

uint IDFromHash(uint hash)
{
	return hash % plCount;
}

void main(){

    currIndex = gl_GlobalInvocationID.x;

    if (currIndex >= plCount) return;

    ivec2 cell = GetCell2D(particles[currIndex]);
    uint hash = HashCell2D(cell);
	uint ID = KeyFromHash(hash);
	spatialIndices[currIndex] = uvec2(currIndex, hash, ID);


}